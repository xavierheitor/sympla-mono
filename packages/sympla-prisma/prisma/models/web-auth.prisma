model User {
    id        String    @id @default(uuid())
    username  String    @unique @db.VarChar(50)
    email     String?   @unique @db.VarChar(255)
    password  String    @db.VarChar(255)
    name      String?   @db.VarChar(255)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    createdBy String
    updatedBy String?
    deletedBy String?
    accounts  Account[]
    sessions  Session[]

    @@index([username])
    @@index([email])
    @@map("usuarios")
}

model Account {
    id                String  @id @default(uuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map("contas")
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    expires      DateTime

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("sessoes")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("tokens_verificacao")
}
