generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//*  ENUMNS SUBESTACAO*/

enum SubestacaoCapital {
  CAPITAL
  INTERIOR
}

enum PropriedadeSubestacao {
  PROPRIA
  COMPARTILHADA
}

enum CategoriaSubestacao {
  DISTRIBUICAO
  SUBTRANSMISSAO
  TRANSMISSAO
}

enum TensaoSubestacao {
  KV_34
  KV_69
  KV_138
  KV_230
}

enum PrioridadeDefeito {
  A
  P1
  P2
  P3
}

enum TipoNota {
  AA
  TS
  RSF
}

enum StatusAnomalia {
  CONC
  PEES
}

enum StatusNota {
  PENDENTE
  PROGRAMADO
  EXECUTADO
  BAIXADO_NO_SAP
  CANCELADO
}

enum StatusAtribuicao {
  ATRIBUIDA
  EM_EXECUCAO
  FINALIZADA
  RECUSADA
  CANCELADA
}

enum TipoAtividadeMobile {
  ivItIu
  mpdj
  mpbb
}

enum StatusAtividade {
  PENDENTE
  EM_EXECUCAO
  CONCLUIDA
  CANCELADA
}

enum OrigemNota {
  SISTEMA
  SAP
}

//*  AUTENTICACAO WEB

model User {
  id        String    @id @default(uuid())
  username  String    @unique @db.VarChar(50)
  email     String?   @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  name      String?   @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
  accounts  Account[]
  sessions  Session[]

  @@index([username])
  @@index([email])
  @@map("usuarios")
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("contas")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessoes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens_verificacao")
}

//*  AUTENTICACAO MOBILE

model UsuarioMobile {
  id                    String                  @id @default(uuid())
  matricula             String                  @unique @db.VarChar(50)
  nome                  String                  @db.VarChar(255)
  email                 String?                 @unique @db.VarChar(255)
  senha                 String                  @db.VarChar(255)
  funcao                String                  @db.VarChar(100)
  ativo                 Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
  createdBy             String
  updatedBy             String?
  deletedBy             String?
  TokenMobile           TokenMobile[]
  sessoes               SessaoMobile[]
  UsuarioMobileRegional UsuarioMobileRegional[]
  AtividadeAtribuicao   AtividadeAtribuicao[]

  @@index([matricula])
  @@map("usuarios_mobile")
}

model SessaoMobile {
  id              String        @id @default(uuid())
  usuarioMobileId String
  deviceInfo      String?       @db.Text
  lastActive      DateTime      @default(now())
  createdAt       DateTime      @default(now())
  expiresAt       DateTime
  ativa           Boolean       @default(true)
  usuario         UsuarioMobile @relation(fields: [usuarioMobileId], references: [id], onDelete: Cascade)

  @@index([usuarioMobileId])
  @@map("sessoes_mobile")
}

model TokenMobile {
  id                    String        @id @default(uuid())
  token                 String        @unique @db.VarChar(255)
  refreshToken          String?       @unique @db.VarChar(255)
  refreshTokenExpiresAt DateTime?
  usuarioMobileId       String
  expiresAt             DateTime
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  revoked               Boolean       @default(false)
  usuarios_mobile       UsuarioMobile @relation(fields: [usuarioMobileId], references: [id], onDelete: Cascade)

  @@index([usuarioMobileId], map: "TokenMobile_usuarioMobileId_fkey")
}

model UsuarioMobileRegional {
  id              String    @id @default(uuid())
  usuarioMobileId String
  regionalId      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  usuarioMobile UsuarioMobile @relation(fields: [usuarioMobileId], references: [id], onDelete: Cascade)
  regional      Regional      @relation(fields: [regionalId], references: [id], onDelete: Cascade)

  @@index([regionalId])
  @@map("usuarios_mobile_regionais")
}

//*  TABELAS

model Distribuidora {
  id        String  @id @default(uuid())
  nome      String
  descricao String?
  codigoSap String? @unique

  regionais Regional[]

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
}

model Regional {
  id        String  @id @default(uuid())
  nome      String
  descricao String?
  codigoSap String? @unique

  distribuidoraId String
  distribuidora   Distribuidora @relation(fields: [distribuidoraId], references: [id])

  subestacoes Subestacao[]

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  NotasSAP NotasSAP[]

  UsuarioMobileRegional UsuarioMobileRegional[]
}

model Subestacao {
  id              String @id @default(uuid())
  nome            String
  sigla           String
  localInstalacao String
  codigoSap       String @unique

  capital     SubestacaoCapital
  propriedade PropriedadeSubestacao
  categoria   CategoriaSubestacao
  tensao      TensaoSubestacao

  regionalId String
  regional   Regional @relation(fields: [regionalId], references: [id])

  equipamentos Equipamento[]

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
}

model GrupoDefeitoEquipamento {
  id   String @id @default(uuid())
  nome String @unique
  codigo String? @unique

  subgrupos    SubgrupoDefeitoEquipamento[]
  defeitos     Defeito[]

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
}

model SubgrupoDefeitoEquipamento {
  id   String @id @default(uuid())
  nome String

  grupoId String
  grupo   GrupoDefeitoEquipamento @relation(fields: [grupoId], references: [id])

  defeitos     Defeito[]

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
}

model Defeito {
  id        String @id @default(uuid())
  codigoSap String @unique
  descricao String

  grupoId String
  grupo   GrupoDefeitoEquipamento @relation(fields: [grupoId], references: [id])

  subgrupoId String
  subgrupo   SubgrupoDefeitoEquipamento @relation(fields: [subgrupoId], references: [id])

  acaoRecomendada       String?
  custeioOuInvestimento String?
  equipe                String?
  prioridade            String?

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
}

model Equipamento {
  id        String  @id @default(uuid())
  nome      String
  descricao String?

  subestacaoId String
  subestacao   Subestacao @relation(fields: [subestacaoId], references: [id])

  grupoDefeitoCodigo String

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  NotasSAP NotasSAP[]
}

model TipoManutencao {
  id   String @id @default(uuid())
  nome String

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  Kpi Kpi[]
}

model Kpi {
  id        String @id @default(uuid())
  nome      String
  descricao String

  tipoManutencaoId String
  tipoManutencao   TipoManutencao @relation(fields: [tipoManutencaoId], references: [id])

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  NotasSAP      NotasSAP[]
  TipoAtividade TipoAtividade[]
}

model NotasSAP {
  id          String  @id @default(uuid())
  descricao   String?
  notificador String?

  numeroNota      String?
  localInstalacao String

  tipoNota       TipoNota
  dataNota       DateTime
  dataInicioPlan DateTime?
  dataFiPlan     DateTime?
  dataInicioReal DateTime?
  dataFiReal     DateTime?

  centroTrabalhoId String
  centroTrabalho   CentroTrabalho @relation(fields: [centroTrabalhoId], references: [id])

  equipamentoId String?
  equipamento   Equipamento? @relation(fields: [equipamentoId], references: [id])

  kpiId String?
  kpi   Kpi?    @relation(fields: [kpiId], references: [id])

  regionalId String
  regional   Regional @relation(fields: [regionalId], references: [id])

  prioridade PrioridadeDefeito?

  status StatusNota @default(PENDENTE)

  ordemServicoExecucao String?

  origemNota OrigemNota @default(SISTEMA)

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  Atividade Atividade[]

  HistoricoAlteracaoNota HistoricoAlteracaoNota[]
}

model CentroTrabalho {
  id   String @id @default(uuid())
  nome String

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  NotasSAP NotasSAP[]
}

model Tecnico {
  id       String @id @default(uuid())
  nome     String
  email    String @unique
  telefone String
  cpf      String @unique
  rg       String @unique

  // Auditoria
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
}

model TipoAtividade {
  id   String @id @default(uuid())
  nome String

  kpiId String?
  kpi   Kpi?    @relation(fields: [kpiId], references: [id])

  tipoAtividadeMobile TipoAtividadeMobile @default(ivItIu)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  Atividade Atividade[]

  AprModelo AprModelo[]

  ChecklistModelo ChecklistModelo[]
}

model Atividade {
  id String @id @default(uuid())
  descricao String?

  notaId String
  nota   NotasSAP @relation(fields: [notaId], references: [id])

  tipoAtividadeId String
  tipoAtividade   TipoAtividade @relation(fields: [tipoAtividadeId], references: [id])

  ordemServico       String?
  status             StatusAtividade @default(PENDENTE)
  prazoLimite        DateTime?
  dataProgramacao    DateTime?
  dataExecucaoInicio DateTime?
  dataExecucaoFim    DateTime?

  atribuicoes AtividadeAtribuicao[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  HistoricoAlteracaoAtividade HistoricoAlteracaoAtividade[]
}

model AtividadeAtribuicao {
  id String @id @default(uuid())

  atividadeId String
  atividade   Atividade @relation(fields: [atividadeId], references: [id])

  usuarioMobileId String
  usuarioMobile   UsuarioMobile @relation(fields: [usuarioMobileId], references: [id])

  status StatusAtribuicao @default(ATRIBUIDA)

  dataInicio DateTime?
  dataFim    DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
}

model HistoricoAlteracaoNota {
  id            String   @id @default(uuid())
  notaId        String
  nota          NotasSAP @relation(fields: [notaId], references: [id])
  campo         String
  valorAnterior String?
  valorNovo     String?
  alteradoPor   String
  alteradoEm    DateTime @default(now())
}

model HistoricoAlteracaoAtividade {
  id            String    @id @default(uuid())
  atividadeId   String
  atividade     Atividade @relation(fields: [atividadeId], references: [id])
  campo         String
  valorAnterior String?
  valorNovo     String?
  alteradoPor   String
  alteradoEm    DateTime  @default(now())
}

//* ANALISE PRELIMINAR DE RISCO

model AprPerguntas {
  id       String @id @default(uuid())
  pergunta String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  AprPerguntasRelation AprPerguntasRelation[]
}

model AprModelo {
  id        String  @id @default(uuid())
  nome      String
  descricao String?

  tipoAtividadeId String
  tipoAtividade   TipoAtividade @relation(fields: [tipoAtividadeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  AprPerguntasRelation AprPerguntasRelation[]
}

model AprPerguntasRelation {
  id         String       @id @default(uuid())
  perguntaId String
  pergunta   AprPerguntas @relation(fields: [perguntaId], references: [id])
  ordem      Int          @default(0)

  modeloId String
  modelo   AprModelo @relation(fields: [modeloId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
}

//* CHECKLIST

model ChecklistPergunta {
  id       String @id @default(uuid())
  pergunta String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  ChecklisrPerguntaRelation ChecklisrPerguntaRelation[]
}

model ChecklistModelo {
  id        String  @id @default(uuid())
  nome      String
  descricao String?

  tipoAtividadeId String
  tipoAtividade   TipoAtividade @relation(fields: [tipoAtividadeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?

  ChecklisrPerguntaRelation ChecklisrPerguntaRelation[]
}

model ChecklisrPerguntaRelation {
  id         String            @id @default(uuid())
  perguntaId String
  pergunta   ChecklistPergunta @relation(fields: [perguntaId], references: [id])
  ordem      Int               @default(0)

  modeloId String
  modelo   ChecklistModelo @relation(fields: [modeloId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  updatedBy String?
  deletedBy String?
}
